[
  {
    "title": "Codeforces Default Template",
    "description": "",
    "code": "// Author: Matthew Li\n// It is ok to share my code anonymously for educational purposes\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, a, b) for (ll i = a; i < b; ++i)\n#define repr(i, a, b) for (ll i = b - 1; i >= a; --i)\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define sz(x) (int)(x).size()\n\ntypedef pair<int, int> pi;\ntypedef vector<int> vi;\ntypedef vector<pair<int, int>> vpi;\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef pair<long long, long long> pll;\ntypedef vector<long long> vll;\ntypedef vector<pair<long long, long long>> vpll;\ntypedef long double ld;\ntypedef pair<long double, long double> pld;\ntypedef vector<long double> vld;\ntypedef vector<pair<long double, long double>> vpld;\n\nint main() {\n  // fast io\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n\n  // iterate over tests\n  int tests;\n  cin >> tests;\n  for (int test = 0; test < tests; test++) {\n    \n  }\n}",
    "category": "Miscellaneous"
  },
  {
    "title": "Kadane's Algorithm",
    "description": "Returns the maximum nonempty subarray sum.",
    "code": "ll kadane(const vll& a) {\n  ll N = sz(a), res = LONG_LONG_MIN, sum = 0;\n  rep (i, 0, N) {\n    sum += a[i];\n    res = max(res, sum);\n    sum = max(sum, 0ll);\n  }\n  return res;\n}",
    "category": "Dynamic Programming",
    "tags": [
      "linear"
    ]
  },
  {
    "title": "Tarjan's Algorithm",
    "description": "Supply a handleScc function and make sure to call tarjans(tarjans, u) on all vertices u.",
    "code": "vll discovery(N, -1), lowlink(N, -1), ancestry;\nvector<bool> onStack(N, false);\nll tarjIdx = 0;\nauto tarjans = [&](auto tarjans, ll u) -> void {\n  discovery[u] = tarjIdx;\n  lowlink[u] = tarjIdx;\n  tarjIdx++;\n  ancestry.push_back(u);\n  onStack[u] = true;\n\n  for (const auto &v : adjList[u]) {\n    if (discovery[v] < 0) {\n      tarjans(tarjans, v);\n      lowlink[u] = min(lowlink[u], lowlink[v]);\n    } else if (onStack[v]) {\n      lowlink[u] = min(lowlink[u], lowlink[v]);\n    }\n  }\n\n  if (discovery[u] == lowlink[u]) {\n    set<ll> scc;\n    ll v = -1;\n    while (v != u) {\n      v = ancestry.back();\n      ancestry.pop_back();\n      onStack[v] = false;\n      scc.insert(v);\n    }\n    handleScc(scc);\n  }\n};",
    "category": "Graphs",
    "tags": [
      "dfs",
      "scc",
      "linear"
    ]
  },
  {
    "title": "Closest Pair of Points",
    "description": "Returns indices of two closest points in the supplied array in O(nlogn), probably.",
    "code": "pll closestPair(const vpld& a) {\n  auto dist = [&](ll i, ll j) -> ld {\n    ld dx = a[i].first - a[j].first, dy = a[i].second - a[j].second;\n    return sqrt(dx * dx + dy * dy);\n  };\n\n  assert(sz(a) > 1);\n  vll idxs(sz(a));\n  iota(all(idxs), 0);\n  sort(all(idxs), [&](ll i, ll j) -> bool {return a[i] < a[j];});\n\n  pll res = {0, 1};\n  ld mind = dist(idxs[0], idxs[1]);\n  multiset<pair<ld, ll>> leftx, lefty;\n  rep (i, 0, sz(idxs)) {\n    ll idx = idxs[i];\n    ld x = a[idx].first, y = a[idx].second;\n\n    while (!leftx.empty()) {\n      auto it = leftx.begin();\n      if (it->first < x - mind) {\n        ll jdx = it->second;\n        leftx.erase(it);\n        lefty.erase({a[jdx].second, jdx});\n      } else {\n        break;\n      }\n    }\n    auto it = lefty.lower_bound({y - mind, 0});\n    auto jt = lefty.upper_bound({y + mind, LONG_LONG_MAX});\n    while (it != jt) {\n      ll jdx = it->second;\n      if (dist(idx, jdx) < mind) {\n        res = {idx, jdx};\n        mind = dist(idx, jdx);\n      }\n      it = next(it);\n    }\n\n    leftx.insert({a[idx].first, idx});\n    lefty.insert({a[idx].second, idx});\n  }\n\n  return res;\n};",
    "category": "Geometry",
    "tags": [
      "sweepline",
      "quasilinear",
      "amortized"
    ]
  },
  {
    "title": "Sieve and Friends",
    "description": "upfs holds the unique prime factors of each number up to MAXN and divisors(x) returns all products of subsets of upfs[x] in a 2d array.",
    "code": "vll primes;\nvll upfs[MAXN + 1]; // unique prime factors\nll totient[MAXN + 1];\nvoid sieve() {\n  rep (i, 2, MAXN + 1) {\n    if (upfs[i].empty()) {\n      primes.push_back(i);\n      totient[i] = i - 1;\n\n      ll j = i;\n      while (j <= MAXN) {\n        upfs[j].push_back(i);\n        j += i;\n      }\n    }\n\n    for (const auto& p : primes) {\n      if (p * i > MAXN) break;\n      if (i % p) {\n        totient[p * i] = totient[i] * (p - 1);\n      } else {\n        totient[p * i] = totient[i] * p;\n      }\n    }\n  }\n}\n\nvector<vll> divisors(ll x) {\n  vector<vll> res;\n  auto dfs = [&](auto dfs, ll prod, ll ct, ll idx) -> void {\n    if (idx == sz(upfs[x])) {\n      if (!ct) return;\n      while (ct > sz(res)) res.push_back(vll());\n      res[ct - 1].push_back(prod);\n      return;\n    }\n    dfs(dfs, prod, ct, idx + 1);\n    dfs(dfs, prod * upfs[x][idx], ct + 1, idx + 1);\n  };\n  dfs(dfs, 1, 0, 0);\n  return res;\n}",
    "category": "Number Theory",
    "tags": [
      "primes",
      "quasilinear"
    ]
  },
  {
    "title": "Miller-Rabin Primality Test",
    "description": "",
    "code": "// copied from KACTL\ntypedef unsigned long long ull;\null modmul(ull a, ull b, ull M) {\n  ll ret = a * b - M * ull(1.L / M * a * b);\n  return ret + M * (ret < 0) - M * (ret >= (ll)M);\n}\null modpow(ull b, ull e, ull mod) {\n  ull ans = 1;\n  for (; e; b = modmul(b, b, mod), e /= 2)\n    if (e & 1) ans = modmul(ans, b, mod);\n  return ans;\n}\nbool isPrime(ull n) {\n  if (n < 2 || n % 6 % 4 != 1) return (n | 1) == 3;\n  ull A[] = {2, 325, 9375, 28178, 450775, 9780504, 1795265022},\n      s = __builtin_ctzll(n-1), d = n >> s;\n  for (ull a : A) {   // ^ count trailing zeroes\n    ull p = modpow(a%n, d, n), i = s;\n    while (p != 1 && p != n - 1 && a % n && i--)\n      p = modmul(p, p, n);\n    if (p != n-1 && i != s) return 0;\n  }\n  return 1;\n}",
    "category": "Number Theory",
    "tags": [
      "primes",
      "probabalistic",
      "constant",
      "KACTL"
    ]
  },
  {
    "title": "Prefix Function",
    "description": "",
    "code": "// copied from cp-algo\nvll prefixFn(const string_view &s) {\n  vll res(sz(s));\n  rep(i, 1, sz(s)) {\n    ll j = res[i - 1];\n    while (j > 0 && s[i] != s[j]) {\n      j = res[j - 1];\n    }\n    if (s[i] == s[j]) {\n      j++;\n    }\n    res[i] = j;\n  }\n  return res;\n}",
    "category": "String Processing",
    "tags": [
      "linear",
      "cp-algo"
    ]
  },
  {
    "title": "Modular Integer",
    "description": "",
    "code": "// copied from KACTL\nll euclid(ll a, ll b, ll &x, ll &y) {\n  if (!b) return x = 1, y = 0, a;\n  ll d = euclid(b, a % b, y, x);\n  return y -= a/b * x, d;\n}\n\nconst ll mod = 1e9 + 7; // change to something else\nstruct mint {\n  ll x;\n  mint(ll xx) : x(xx) {}\n\n  mint operator+(mint b) { return mint((x + b.x) % mod); }\n  mint operator-(mint b) { return mint((x - b.x + mod) % mod); }\n  mint operator*(mint b) { return mint((x * b.x) % mod); }\n  mint operator/(mint b) { return *this * invert(b); }\n\n  void operator+=(mint b) { *this = mint((x + b.x) % mod); }\n  void operator-=(mint b) { *this = mint((x - b.x + mod) % mod); }\n  void operator*=(mint b) { *this =  mint((x * b.x) % mod); }\n  void operator/=(mint b) { *this = *this * invert(b); }\n\n  mint invert(mint a) {\n    ll x, y, g = euclid(a.x, mod, x, y);\n    assert(g == 1); return mint((x + mod) % mod);\n  }\n\n  mint operator^(ll e) {\n    if (!e) return mint(1);\n    mint r = *this ^ (e / 2); r = r * r;\n    return e&1 ? *this * r : r;\n  }\n};",
    "category": "Number Theory",
    "tags": [
      "KACTL"
    ]
  },
  {
    "title": "Polynomial String Hashing",
    "description": "Robust polynomial string hashing using two different moduli. combine_hashes finds the hash of the concatenation of two hashed substrings.",
    "code": "// mint copied from KACTL\nll euclid(ll a, ll b, ll &x, ll &y) {\n  if (!b) return x = 1, y = 0, a;\n  ll d = euclid(b, a % b, y, x);\n  return y -= a / b * x, d;\n}\n\ntemplate<ll mod> struct mint {\n  ll x;\n\n  mint(ll xx) : x(xx) {\n  }\n\n  mint operator+(mint b) { return mint((x + b.x) % mod); }\n  mint operator-(mint b) { return mint((x - b.x + mod) % mod); }\n  mint operator*(mint b) { return mint((x * b.x) % mod); }\n  mint operator/(mint b) { return *this * invert(b); }\n\n  void operator+=(mint b) { x = (x + b.x) % mod; }\n  void operator-=(mint b) { x = (x - b.x + mod) % mod; }\n  void operator*=(mint b) { x = (x * b.x) % mod; }\n  void operator/=(mint b) { x = *this * invert(b); }\n\n  bool operator==(const mint b) const { return this->x == b.x; }\n\n  mint invert(mint a) {\n    ll x, y, g = euclid(a.x, mod, x, y);\n    assert(g == 1);\n    return mint((x + mod) % mod);\n  }\n\n  mint operator^(ll e) {\n    if (!e) return mint(1);\n    mint r = *this ^ (e / 2);\n    r = r * r;\n    return e & 1 ? *this * r : r;\n  }\n};\n\nconst ll MOD1 = 1e9 + 7, MOD2 = 1e9 + 9;\nconst mint<MOD1> POLY_HASH_COEF1 = 31;\nconst mint<MOD2> POLY_HASH_COEF2 = 37;\n\nll default_poly_hash_translate(char c) {\n  return c;\n}\n\nstruct poly_hash {\n  string str;\n  vector<mint<MOD1>> pre1;\n  vector<mint<MOD2>> pre2;\n  function<ll(char)> translate;\n\n  poly_hash(string &s, function<ll(char)> *t = NULL) {\n    str = s;\n    pre1 = vector<mint<MOD1>>(sz(str) + 1, 0);\n    pre2 = vector<mint<MOD2>>(sz(str) + 1, 0);\n    if (!t) {\n      translate = default_poly_hash_translate;\n    } else {\n      translate = *t;\n    }\n\n    rep(i, 0, sz(str)) {\n      pre1[i + 1] = pre1[i] + (mint(POLY_HASH_COEF1) ^ i) * translate(str[i]);\n      pre2[i + 1] = pre2[i] + (mint(POLY_HASH_COEF2) ^ i) * translate(str[i]);\n    }\n  }\n\n  pair<mint<MOD1>, mint<MOD2>> hash(int l, int r) {\n    return { (pre1[r + 1] - pre1[l]) / (mint(POLY_HASH_COEF1) ^ l), (pre2[r + 1] - pre2[l]) / (mint(POLY_HASH_COEF2) ^ l) };\n  }\n};\n\npair<mint<MOD1>, mint<MOD2>> combine_hashes(poly_hash &phash1, poly_hash &phash2, int l1, int r1, int l2, int r2) {\n  pair<mint<MOD1>, mint<MOD2>> hash1 = phash1.hash(l1, r1), hash2 = phash2.hash(l2, r2);\n  return { hash1.first + hash2.first * (mint(POLY_HASH_COEF1) ^ (r1 - l1 + 1)), hash1.second + hash2.second * (mint(POLY_HASH_COEF2) ^ (r1 - l1 + 1)) };\n}",
    "category": "String Processing",
    "tags": [
      "hashing",
      "probabalistic",
      "linear"
    ]
  },
  {
    "title": "Point and Line",
    "description": "TODO: add line-line intersection",
    "code": "struct point {\n  ld x, y;\n\n  point& operator+=(const point& p) {\n    x += p.x;\n    y += p.y;\n    return *this;\n  }\n  friend point operator+(point p, const point& q) {\n    p += q;\n    return p;\n  }\n  point& operator-=(const point& p) {\n    x -= p.x;\n    y -= p.y;\n    return *this;\n  }\n  friend point operator-(point p, const point& q) {\n    p -= q;\n    return p;\n  }\n\n  ld dot(const point& p) {\n    return x * p.x + y * p.y;\n  }\n  ld cross(const point& p) {\n    return x * p.y - y * p.x;\n  }\n  ld angle() {\n    if (x == 0) {\n      if (y > 0) return numbers::pi_v<ld> / 2;\n      return 3 * numbers::pi_v<ld> / 2;\n    }\n    if (x > 0) {\n      if (y >= 0) return atan(y / x);\n      return 2 * numbers::pi_v<ld> + atan(y / x);\n    }\n    return numbers::pi_v<ld> + atan(y / x);\n  }\n  ld length() {\n    return sqrt(x * x + y * y);\n  }\n};\npoint operator*(const ld& s, const point& p) {\n  return {s * p.x, s * p.y};\n}\npoint operator*(const point& p, const ld& s) {\n  return {s * p.x, s * p.y};\n}\npoint operator/(const point& p, const ld& s) {\n  return {p.x / s, p.y / s};\n}\npoint rotate(const point& p, ld theta) {\n  return {cos(theta) * p.x - sin(theta) * p.y, sin(theta) * p.x + cos(theta) * p.y};\n}\nld dist(const point& p, const point& q) {\n  return (p - q).length();\n}\n\nstruct line {\n  ld a, b, c;\n\n  line (point p, point q) {\n    a = p.y - q.y;\n    b = q.x - p.x;\n    c = -(a * p.x + b * p.y);\n  }\n};\n\nld area(const vector<point>& polygon) {\n  ld res = 0;\n  rep (i, 0, sz(polygon)) {\n    ll j = (i + 1) % sz(polygon);\n    res += polygon[i].x * polygon[j].y - polygon[i].y * polygon[j].x;\n  }\n  return res / 2;\n}",
    "category": "Geometry",
    "tags": [
      "point",
      "line"
    ]
  },
  {
    "title": "Circle and Ellipse Utilities",
    "description": "Both functions assume that the major axis is parallel to the x-axis and that the ellipse is centered at the origin, so use transformations as necessary.",
    "code": "ld segmentArea(ld r, ld t) {\n  return r * r * (t - sin(t)) / 2;\n}\n\nld ellipticSegmentArea(ld c, ld l, const point& p, const point& q) {\n  ld a = l / 2 - c, b = sqrt(a * a - c * c);\n  point pp = {p.x / a, p.y / b}, qp = {q.x / a, q.y / b};\n  if (pp.angle() > qp.angle()) swap(pp, qp);\n  return a * b * segmentArea(1, qp.angle() - pp.angle());\n}\n\npair<point, point> circleLineIntersection(ld r, const point& p, const point& q) {\n  line l(p, q);\n  ld d = sqrt(r * r - l.c * l.c / (l.a * l.a + l.b * l.b));\n  ld m = sqrt(d * d / (l.a * l.a + l.b * l.b));\n  ld x0 = -(l.a * l.c) / (l.a * l.a + l.b * l.b), y0 = -(l.b * l.c) / (l.a * l.a + l.b * l.b);\n  return {{x0 + l.b * m, y0 - l.a * m}, {x0 - l.b * m, y0 + l.a * m}};\n}\n\npair<point, point> ellipseLineIntersection(ld c, ld l, const point& p, const point& q) {\n  ld a = l / 2 - c, b = sqrt(a * a - c * c);\n  point pp = {p.x / a, p.y / b}, qp = {q.x / a, q.y / b};\n  auto [ap, bp] = circleLineIntersection(1, pp, qp);\n  return {{ap.x * a, ap.y * b}, {bp.x * a, bp.y * b}};\n}",
    "category": "Geometry",
    "tags": [
      "circle",
      "ellipse",
      "line"
    ]
  },
  {
    "title": "Unique Point and Line",
    "description": "",
    "code": "struct point {\n  ll x, y;\n\n  point& operator+=(const point& p) {\n    x += p.x;\n    y += p.y;\n    return *this;\n  }\n  friend point operator+(point p, const point& q) {\n    p += q;\n    return p;\n  }\n  point& operator-=(const point& p) {\n    x -= p.x;\n    y -= p.y;\n    return *this;\n  }\n  friend point operator-(point p, const point& q) {\n    p -= q;\n    return p;\n  }\n\n  ll dot(const point& p) {\n    return x * p.x + y * p.y;\n  }\n  ll cross(const point& p) {\n    return x * p.y - y * p.x;\n  }\n};\n\nstruct line {\n  ll a, b, c;\n\n  const bool operator< (const line& l) const {\n    if (a < l.a) return true;\n    if (a > l.a) return false;\n    if (b < l.b) return true;\n    if (b > l.b) return false;\n    if (c < l.c) return true;\n    return false;\n  }\n\n  const bool operator== (const line& l) const {\n    return a == l.a && b == l.b && c == l.c;\n  }\n\n  line (point p, point q) {\n    a = p.y - q.y;\n    b = q.x - p.x;\n    c = -(a * p.x + b * p.y);\n    fix();\n  }\n\n  void fix() {\n    if (a < 0 || (a == 0 && b < 0)) {\n      a = -a;\n      b = -b;\n      c = -c;\n    }\n\n    ll g = gcd(gcd(abs(a), abs(b)), abs(c));\n    a /= g;\n    b /= g;\n    c /= g;\n  }\n};",
    "category": "Geometry",
    "tags": [
      "point",
      "line"
    ]
  },
  {
    "title": "Order Statistic Tree",
    "description": "Gnu policy-based data structures implementation of order statistic trees. Just use set and multiset as you typically would, but you can also do stuff with order.",
    "code": "#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace __gnu_pbds;\n\ntypedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\ntypedef tree<ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;",
    "category": "Data Structures",
    "tags": [
      "bsearch",
      "amortized",
      "logarithmic-query",
      "logarithmic-update"
    ]
  },
  {
    "title": "Disjoint Set Union",
    "description": "DSU with path compression and union-by-size. id holds the representatives of each set. If id[x] is negative, it means that x is the representative and the set is of size -id[x]. Easily modified to support one-way unite.",
    "code": "ll find(ll p, vector<ll> &id) {\n  ll idp = p;\n  while (id[idp] >= 0) {\n    idp = id[idp];\n  }\n  while (id[p] >= 0) {\n    ll temp = id[p];\n    id[p] = idp;\n    p = temp;\n  }\n  return idp;\n}\n \nll size(ll p, vector<ll> &id) {\n  ll idp = find(p, id);\n  return -id[idp];\n}\n \nvoid unite(ll p, ll q, vector<ll> &id) {\n  ll idp = find(p, id);\n  ll idq = find(q, id);\n  if (idp == idq) {\n    return;\n  }\n  if (id[idp] < id[idq]) {\n    id[idq] = id[idq] + id[idp];\n    id[idp] = idq;\n    return;\n  }\n  id[idp] = id[idp] + id[idq];\n  id[idq] = idp;\n}",
    "category": "Data Structures",
    "tags": [
      "amortized",
      "near-constant-query",
      "near-constant-update"
    ]
  },
  {
    "title": "Sparse Table",
    "description": "Typical Sparse Table.  Ensure that the binary operation passed to the constructor is associative.  Does not support constant-time RMQ.",
    "code": "template <class T>\nstruct sparse_table {\n  T (*op) (T a, T b);\n  unsigned int length, depth;\n  vector<vector<T>> table;\n  \n  sparse_table(vector<T> arr, T (*o) (T a, T b)) {\n    op = o;\n    length = arr.size();\n    depth = bit_width(length);\n    table = vector<vector<T>>(depth, vector<T>());\n    table[0] = arr;\n    for (unsigned int i = 1; i < depth; i++) {\n      for (unsigned int j = 0; j + (1 << i) <= length; j++) {\n        table[i].push_back(op(table[i - 1][j], table[i - 1][j + (1 << i - 1)]));\n      }\n    }\n  }\n  \n  T query(unsigned int l, unsigned int r) {\n    bool has_been_set = false;\n    T out;\n    for (unsigned int i = depth - 1; i >= 0; i--) {\n      while (l + (1 << i) - 1 <= r) {\n        if (!has_been_set) {\n          out = table[i][l];\n          has_been_set = true;\n        } else {\n          out = op(out, table[i][l]);\n        }\n        l += (1 << i);\n      }\n      if (!i) {\n        break;\n      }\n    }\n    return out;\n  }\n};",
    "category": "Data Structures",
    "tags": [
      "bsearch",
      "logarithmic-query"
    ]
  },
  {
    "title": "Fenwick Tree",
    "description": "Typical Fenwick Tree.  Ensure that the binary operation passed to the constructor is a group operation and supply its inverse and zero.",
    "code": "template <class T> struct fenwick_tree {\n  T (*op) (T a, T b);\n  T (*inv) (T a);\n  T zero;\n  vector<T> bit;\n\n  T prefix(int idx) {\n    if (idx < 0) {\n      return zero;\n    }\n    if (idx >= size()) idx = size() - 1;\n    T result = bit[idx];\n    for (int i = (idx & idx + 1) - 1; i >= 0; i = (i & i + 1) - 1) {\n      result = op(result, bit[i]);\n    }\n    return result;\n  }\n\n  T query(int l, int r) {\n    return op(prefix(r), inv(prefix(l - 1)));\n  }\n\n  void set(int idx, T val) {\n    T diff = op(val, inv(query(idx, idx)));\n    for (int i = idx; i < bit.size(); i = i | i + 1) {\n      bit[i] = op(bit[i], diff);\n    }\n  }\n\n  void add(int idx, T val) {\n    for (int i = idx; i < bit.size(); i = i | i + 1) {\n      bit[i] = op(bit[i], val);\n    }\n  }\n\n  void push_back(T val) {\n    int idx = bit.size();\n    int left = idx & (idx + 1);\n    if (idx == left) {\n      bit.push_back(val);\n    } else {\n      bit.push_back(op(val, query(left, idx - 1)));\n    }\n  }\n\n  unsigned int size() {\n    return bit.size();\n  }\n\n  int lower_bound(T a, ll (*comp) (T, T)) {\n    int res = 0;\n    for (int i = 1 << (bit_width(size()) - 1); i > 0; i >>= 1) {\n      if (res + i - 1 < size() && comp(bit[res + i - 1], a) < 0) {\n        res += i;\n        a = op(a, inv(bit[res - 1]));\n      }\n    }\n    return res;\n  }\n\n  int upper_bound(T a, ll (*comp) (T, T)) {\n    int res = 0;\n    for (int i = 1 << (bit_width(size()) - 1); i > 0; i >>= 1) {\n      if (res + i - 1 < size() && comp(bit[res + i - 1], a) <= 0) {\n        res += i;\n        a = op(a, inv(bit[res - 1]));\n      }\n    }\n    return res;\n  }\n\n  fenwick_tree(vector<T> arr, T(*o) (T a, T b), T(*iv) (T a), T z) {\n    op = o;\n    inv = iv;\n    zero = z;\n    int length = arr.size();\n    bit = vector<T>(length, z);\n    for (int i = 0; i < length; i++) {\n      add(i, arr[i]);\n    }\n  }\n};\n\nll add(ll a, ll b) { return a + b; }\nll neg(ll a) { return -a; }\nll diff(ll a, ll b) { return a - b; }", 
    "category": "Data Structures",
    "tags": [
      "bsearch",
      "logarithmic-query",
      "logarithmic-update"
    ]
  },
  {
    "title": "Point Update Segment Tree",
    "description": "Point update segment tree.  Make sure to define the info class and overload its addition operator.",
    "code": "struct segment_tree {\n  vector<info> t;\n  int n;\n\n  segment_tree(const vector<info> &a) {\n    t = vector<info>(4 * a.size());\n    n = a.size();\n    build(1, 0, n - 1, a);\n  }\n\n  void build(int idx, int tl, int tr, const vector<info> &a) {\n    if (tl == tr) {\n      t[idx] = a[tl];\n      return;\n    }\n    int tm = tl + (tr - tl) / 2;\n    build(2 * idx, tl, tm, a);\n    build(2 * idx + 1, tm + 1, tr, a);\n    t[idx] = t[2 * idx] + t[2 * idx + 1];\n  }\n\n  inline void update(int m, const info &a) {\n    update(1, 0, n - 1, m, a);\n  }\n\n  void update(int idx, int tl, int tr, int m, const info &a) {\n    if (m < tl || m > tr) return;\n    if (tl == tr) {\n      t[idx] = a;\n      return;\n    }\n    int tm = tl + (tr - tl) / 2;\n    update(2 * idx, tl, tm, m, a);\n    update(2 * idx + 1, tm + 1, tr, m, a);\n    t[idx] = t[2 * idx] + t[2 * idx + 1];\n  }\n\n  inline info query(int l, int r) {\n    return query(1, 0, n - 1, l, r);\n  }\n\n  info query(int idx, int tl, int tr, int l, int r) {\n    if (r < l) return info();\n    if (tl == l && tr == r) return t[idx];\n    int tm = tl + (tr - tl) / 2;\n    return query(2 * idx, tl, tm, l, min(tm, r)) + query(2 * idx + 1, tm + 1, tr, max(tm + 1, l), r);\n  }\n};",
    "category": "Data Structures",
    "tags": [
      "bsearch",
      "logarithmic-query",
      "logarithmic-update"
    ]
  },
  {
    "title": "Range Update Lazy Segment Tree",
    "description": "Generalist lazy prop segment tree. jnfo corresponds to that information used to update the tree and info are the actual tree members. Overload their operators as necessary and the tree logic should not need to be touched. Tested on Range Affine Range Sum.",
    "code": "struct jnfo {\n  ll a;\n  jnfo(): a(0) {}\n  jnfo(ll b): a(b) {}\n  jnfo& operator+=(const jnfo& x) {\n    a += x.a;\n    return *this;\n  }\n};\n\nstruct info {\n  ll val;\n  // info() should be the merge identity\n  info(): val(LONG_LONG_MIN) {}\n  // implicitly, it is expected that info(0) is an additive identity\n  info(ll v): val(v) {}\n  // updating operation\n  info& operator+=(const jnfo& x) {\n    val += x.a;\n    return *this;\n  }\n  friend info operator+(info x, const jnfo& y) {\n    x += y;\n    return x;\n  }\n  // merging operation\n  info& operator*=(const info& x) {\n    val = max(val, x.val);\n    return *this;\n  }\n  friend info operator*(info x, const info& y) {\n    x *= y;\n    return x;\n  }\n};\n\nstruct lazy_segtree {\n  vector<info> a;\n  vector<jnfo> lazy;\n  ll N;\n\n  lazy_segtree(const vll& arr) {\n    N = arr.size();\n    a = vector<info>(4 * N);\n    lazy = vector<jnfo>(4 * N);\n    build(1, 0, N - 1, arr);\n  }\n\n  void build(ll idx, ll tl, ll tr, const vll& arr) {\n    if (tl == tr) {\n      a[idx] = info(arr[tl]);\n      return;\n    }\n    ll tm = tl + (tr - tl) / 2;\n    build(2 * idx, tl, tm, arr);\n    build(2 * idx + 1, tm + 1, tr, arr);\n    a[idx] = a[2 * idx] * a[2 * idx + 1];\n  }\n\n  void push(ll idx) {\n    a[idx * 2] += lazy[idx];\n    a[idx * 2 + 1] += lazy[idx];\n    lazy[idx * 2] += lazy[idx];\n    lazy[idx * 2 + 1] += lazy[idx];\n    lazy[idx] = jnfo();\n  }\n\n  void update(ll l, ll r, jnfo x) {\n    update(1, 0, N - 1, l, r, x);\n  }\n\n  void update(ll idx, ll tl, ll tr, ll l, ll r, jnfo x) {\n    if (l > r) return;\n    if (l == tl && r == tr) {\n      a[idx] += x;\n      lazy[idx] += x;\n    } else {\n      push(idx);\n      ll tm = tl + (tr - tl) / 2;\n      update(idx * 2, tl, tm, l, min(r, tm), x);\n      update(idx * 2 + 1, tm + 1, tr, max(l, tm + 1), r, x);\n      a[idx] = a[idx * 2] * a[idx * 2 + 1];\n    }\n  }\n\n  info query(ll l, ll r) {\n    return query(1, 0, N - 1, l, r);\n  }\n\n  info query(ll idx, ll tl, ll tr, ll l, ll r) {\n    if (l > r) return info();\n    if (tl == l && tr == r) return a[idx];\n    push(idx);\n    ll tm = tl + (tr - tl) / 2;\n    return query(2 * idx, tl, tm, l, min(tm, r)) * query(2 * idx + 1, tm + 1, tr, max(tm + 1, l), r);\n  }\n};\n",
    "category": "Data Structures",
    "tags": [
      "bsearch",
      "logarithmic-query",
      "logarithmic-update"
    ]
  },
  {
    "title": "Li Chao Tree",
    "description": "Li Chao Tree implemented as a dynamic segment tree on lines. Tested on Line Add Get Min.",
    "code": "struct line {\n  ll a, b;\n\n  ll val(ll x) {\n    return a * x + b;\n  }\n};\n\nstruct node {\n  node * left = NULL, * right = NULL;\n  line v;\n  bool has_line = false;\n  ll l, r;\n\n  node(ll l, ll r) {\n    this->l = l;\n    this->r = r;\n  }\n\n  void ensure_left() {\n    if (!left && l < r) {\n      ll m = l + (r - l) / 2;\n      left = new node(l, m);\n      if (has_line) {\n        left->v = v;\n      }\n    }\n  }\n\n  void ensure_right() {\n    if (!right && l < r) {\n      ll m = l + (r - l) / 2;\n      right = new node(m + 1, r);\n      if (has_line) {\n        right->has_line = true;\n        right->v = v;\n      }\n    }\n  }\n};\n\nstruct li_chao_tree {\n  ll ml, mr;\n  node * root = NULL;\n\n  li_chao_tree(ll l, ll r) {\n    ml = l;\n    mr = r;\n    root = new node(l, r);\n  };\n\n  inline void update(line v, ll l, ll r) {\n    update(root, v, ml, mr, l, r);\n  }\n\n  void update(node * cur, line v, ll tl, ll tr, ll l, ll r) {\n    if (l > r) return;\n    if (tl == l && tr == r) {\n      update_node(cur, v);\n    } else if (tl < tr) {\n      ll tm = tl + (tr - tl) / 2;\n      if (l <= tm) {\n        cur->ensure_left();\n        update(cur->left, v, tl, tm, l, min(tm, r));\n      }\n      if (r > tm) {\n        cur->ensure_right();\n        update(cur->right, v, tm + 1, tr, max(tm + 1, l), r);\n      }\n    }\n  }\n\n  void update_node(node * cur, line v) {\n    ll tl = cur->l, tr = cur->r;\n    ll tm = tl + (tr - tl) / 2;\n\n    if (!cur->has_line) {\n      // currently no line, replace\n      cur->has_line = true;\n      cur->v = v;\n      return;\n    }\n\n    // there is already a line\n    bool gl = v.val(tl) > cur->v.val(tl), gm = v.val(tm) > cur->v.val(tm), gr = v.val(tr) > cur->v.val(tr);\n    if (gl && gr) {\n      cur->has_line = true;\n      cur->v = v;\n      return;\n    }\n    if (!gl && !gr) return;\n\n    if (gm) swap(cur->v, v);\n    if (gl != gm) {\n      cur->ensure_left();\n      update_node(cur->left, v);\n    } else if (gr != gm) {\n      cur->ensure_right();\n      update_node(cur->right, v);\n    }\n  }\n\n  inline ll query(ll x) {\n    return query(root, x);\n  }\n\n  ll query(node * cur, ll x) {\n    ll tl = cur->l, tr = cur->r;\n    ll tm = tl + (tr - tl) / 2;\n    ll ans = LONG_LONG_MIN;\n    if (cur->has_line) {\n      ans = cur->v.val(x);\n    }\n    if (x <= tm && cur->left) {\n      ans = max(ans, query(cur->left, x));\n    } else if (x > tm && cur->right) {\n      ans = max(ans, query(cur->right, x));\n    }\n    return ans;\n  }\n};",
    "category": "Data Structures",
    "tags": [
      "convex-hull",
      "bsearch",
      "logarithmic-query",
      "logarithmic-update"
    ]
  },
  {
    "title": "Heavy-Light Decomposition",
    "description": "Decomposes a tree to support lazy segment tree path queries and updates. Is path add, path max by default but can easily be modified by overloading jnfo and info operators.",
    "code": "struct jnfo {\n  ll a;\n  jnfo(): a(0) {}\n  jnfo(ll b): a(b) {}\n  jnfo& operator+=(const jnfo& x) {\n    a += x.a;\n    return *this;\n  }\n};\n\nstruct info {\n  ll val;\n  // info() should be the merge identity\n  info(): val(LONG_LONG_MIN) {}\n  // implicitly, it is expected that info(0) is an additive identity\n  info(ll v): val(v) {}\n  // updating operation\n  info& operator+=(const jnfo& x) {\n    val += x.a;\n    return *this;\n  }\n  friend info operator+(info x, const jnfo& y) {\n    x += y;\n    return x;\n  }\n  // merging operation\n  info& operator*=(const info& x) {\n    val = max(val, x.val);\n    return *this;\n  }\n  friend info operator*(info x, const info& y) {\n    x *= y;\n    return x;\n  }\n};\n\nstruct lazy_segtree {\n  vector<info> a;\n  vector<jnfo> lazy;\n  ll N;\n\n  lazy_segtree(const vll& arr) {\n    N = arr.size();\n    a = vector<info>(4 * N);\n    lazy = vector<jnfo>(4 * N);\n    build(1, 0, N - 1, arr);\n  }\n\n  void build(ll idx, ll tl, ll tr, const vll& arr) {\n    if (tl == tr) {\n      a[idx] = info(arr[tl]);\n      return;\n    }\n    ll tm = tl + (tr - tl) / 2;\n    build(2 * idx, tl, tm, arr);\n    build(2 * idx + 1, tm + 1, tr, arr);\n    a[idx] = a[2 * idx] * a[2 * idx + 1];\n  }\n\n  void push(ll idx) {\n    a[idx * 2] += lazy[idx];\n    a[idx * 2 + 1] += lazy[idx];\n    lazy[idx * 2] += lazy[idx];\n    lazy[idx * 2 + 1] += lazy[idx];\n    lazy[idx] = jnfo();\n  }\n\n  void update(ll l, ll r, jnfo x) {\n    update(1, 0, N - 1, l, r, x);\n  }\n\n  void update(ll idx, ll tl, ll tr, ll l, ll r, jnfo x) {\n    if (l > r) return;\n    if (l == tl && r == tr) {\n      a[idx] += x;\n      lazy[idx] += x;\n    } else {\n      push(idx);\n      ll tm = tl + (tr - tl) / 2;\n      update(idx * 2, tl, tm, l, min(r, tm), x);\n      update(idx * 2 + 1, tm + 1, tr, max(l, tm + 1), r, x);\n      a[idx] = a[idx * 2] * a[idx * 2 + 1];\n    }\n  }\n\n  info query(ll l, ll r) {\n    return query(1, 0, N - 1, l, r);\n  }\n\n  info query(ll idx, ll tl, ll tr, ll l, ll r) {\n    if (l > r) return info();\n    if (tl == l && tr == r) return a[idx];\n    push(idx);\n    ll tm = tl + (tr - tl) / 2;\n    return query(2 * idx, tl, tm, l, min(tm, r)) * query(2 * idx + 1, tm + 1, tr, max(tm + 1, l), r);\n  }\n};\n\n// adapted from KACTL\ntemplate <bool edgeVals> struct heavy_light{\n  // to be brave is to risk MLE for no good reason\n  ll N, time = 0;\n  vector<vll> cld;\n  vll par, weight, light, tin;\n  lazy_segtree sgtr;\n  heavy_light(const vector<vll>& adjList):\n  N(sz(adjList)),\n  cld(N),\n  par(N, -1),\n  weight(N, 0),\n  light(N, 0),\n  tin(N),\n  sgtr(vll(N, 0)) {\n    dfsWeight(0, -1, adjList);\n    dfsLight(0);\n  }\n\n  void dfsWeight(ll u, ll w, const vector<vll>& adjList) {\n    for (const auto& v : adjList[u]) {\n      if (v != w) {\n        cld[u].push_back(v);\n        par[v] = u;\n        dfsWeight(v, u, adjList);\n        weight[u] += weight[v];\n        if (weight[v] > weight[cld[u][0]]) {\n          swap(cld.back(), cld[0]);\n        }\n      }\n    }\n  }\n\n  void dfsLight(ll u) {\n    tin[u] = time++;\n    for (const auto& v : cld[u]) {\n      if (v == cld[u][0]) {\n        light[v] = light[u];\n      } else {\n        light[v] = v;\n      }\n      dfsLight(v);\n    }\n  }\n\n  void modifyPath(ll u, ll v, ll val) {\n    for (;; v = par[light[v]]) {\n      if (tin[u] > tin[v]) swap(u, v);\n      if (light[u] == light[v]) break;\n      sgtr.update(tin[light[v]], tin[v], val);\n    }\n    if (tin[u] > tin[v]) swap(u, v);\n    sgtr.update(tin[u] + edgeVals, tin[v], val);\n  }\n\n  info queryPath(ll u, ll v) {\n    info res;\n    for (;; v = par[light[v]]) {\n      if (tin[u] > tin[v]) swap(u, v);\n      if (light[u] == light[v]) break;\n    res = res * sgtr.query(tin[light[v]], tin[v]);\n    }\n    return res * sgtr.query(tin[u] + edgeVals, tin[v]);\n  }\n\n  /*\n  int querySubtree(int v) { // modifySubtree is similar\n    return tree->query(pos[v] + VALS_EDGES, pos[v] + siz[v]);\n  }\n  */\n};\n",
    "category": "Graphs",
    "tags": [
      "tree",
      "dfs",
      "bsearch",
      "logarithmic-squared-query",
      "logarithmic-squared-update",
      "KACTL"
    ]
  },
  {
    "title": "Segment Tree Beats!",
    "description": "Tested on Range Chmin Chmax Add Range Sum. If implementing this was bad, then I don't want to imagine what the Charlotte Segment Tree is like.",
    "code": "struct jnfo {\r\n  ll a;\r\n  jnfo(): a(0) {}\r\n  jnfo(ll b): a(b) {}\r\n  jnfo& operator+=(const jnfo& x) {\r\n    a += x.a;\r\n    return *this;\r\n  }\r\n};\r\n\r\nconst ll infty = 1e18;\r\nstruct info {\r\n  ll sum, width, min1, min2, minc, max1, max2, maxc;\r\n  \/\/ info() should be the merge identity\r\n  info(): sum(0), width(1), min1(infty), min2(infty), minc(1), max1(-infty), max2(-infty), maxc(1) {}\r\n  \/\/ implicitly, it is expected that info(0) is an additive identity\r\n  info(ll x): sum(x), width(1), min1(x), min2(infty), minc(1), max1(x), max2(-infty), maxc(1) {}\r\n  \/\/ updating operation\r\n  info& operator+=(const jnfo& x) {\r\n    sum += x.a * width;\r\n    min1 += x.a;\r\n    min2 += x.a;\r\n    max1 += x.a;\r\n    max2 += x.a;\r\n    return *this;\r\n  }\r\n  friend info operator+(info x, const jnfo& y) {\r\n    x += y;\r\n    return x;\r\n  }\r\n  \/\/ merging operation\r\n  info& operator*=(const info& x) {\r\n    sum += x.sum;\r\n    width += x.width;\r\n    if (min1 > x.min1) {\r\n      min2 = min(min1, x.min2);\r\n      min1 = x.min1;\r\n      minc = x.minc;\r\n    } else if (min1 == x.min1) {\r\n      min2 = min(min2, x.min2);\r\n      minc += x.minc;\r\n    } else {\r\n      min2 = min(min2, x.min1);\r\n    }\r\n    if (max1 < x.max1) {\r\n      max2 = max(max1, x.max2);\r\n      max1 = x.max1;\r\n      maxc = x.maxc;\r\n    } else if (max1 == x.max1) {\r\n      max2 = max(max2, x.max2);\r\n      maxc += x.maxc;\r\n    } else {\r\n      max2 = max(max2, x.max1);\r\n    }\r\n    return *this;\r\n  }\r\n  friend info operator*(info x, const info& y) {\r\n    x *= y;\r\n    return x;\r\n  }\r\n};\r\n\r\nstruct lazy_segtree {\r\n  vector<info> a;\r\n  vector<jnfo> lazy;\r\n  ll N;\r\n\r\n  lazy_segtree(const vll& arr) {\r\n    N = arr.size();\r\n    a = vector<info>(4 * N);\r\n    lazy = vector<jnfo>(4 * N);\r\n    build(1, 0, N - 1, arr);\r\n  }\r\n\r\n  void build(ll idx, ll tl, ll tr, const vll& arr) {\r\n    if (tl == tr) {\r\n      a[idx] = info(arr[tl]);\r\n      return;\r\n    }\r\n    ll tm = tl + (tr - tl) \/ 2;\r\n    build(2 * idx, tl, tm, arr);\r\n    build(2 * idx + 1, tm + 1, tr, arr);\r\n    a[idx] = a[2 * idx] * a[2 * idx + 1];\r\n  }\r\n\r\n  void pushAdd(ll idx) {\r\n    a[idx * 2] += lazy[idx];\r\n    a[idx * 2 + 1] += lazy[idx];\r\n\r\n    lazy[idx * 2] += lazy[idx];\r\n    lazy[idx * 2 + 1] += lazy[idx];\r\n    lazy[idx] = jnfo();\r\n  }\r\n\r\n  void pushMin(ll idx) {\r\n    auto p = [&](ll idx, ll jdx) -> void {\r\n      if (a[idx].min1 >= a[jdx].max1) {\r\n        a[jdx].max1 = a[idx].min1;\r\n        a[jdx].max2 = -infty;\r\n        a[jdx].min2 = infty;\r\n      } else if (a[idx].min1 > a[jdx].max2 && a[jdx].min1 <= a[jdx].max2) {\r\n        a[jdx].max2 = a[idx].min1;\r\n      }\r\n      a[jdx].sum -= a[jdx].min1 * a[jdx].minc;\r\n      a[jdx].min1 = max(a[jdx].min1, a[idx].min1);\r\n      a[jdx].sum += a[jdx].min1 * a[jdx].minc;\r\n    };\r\n\r\n    p(idx, 2 * idx);\r\n    p(idx, 2 * idx + 1);\r\n  }\r\n\r\n  void pushMax(ll idx) {\r\n    auto p = [&](ll idx, ll jdx) -> void {\r\n      if (a[idx].max1 <= a[jdx].min1) {\r\n        a[jdx].min1 = a[idx].max1;\r\n        a[jdx].min2 = infty;\r\n        a[jdx].max2 = -infty;\r\n      } else if (a[idx].max1 < a[jdx].min2 && a[jdx].min1 <= a[jdx].max2) {\r\n        a[jdx].min2 = a[idx].max1;\r\n      }\r\n      a[jdx].sum -= a[jdx].max1 * a[jdx].maxc;\r\n      a[jdx].max1 = min(a[jdx].max1, a[idx].max1);\r\n      a[jdx].sum += a[jdx].max1 * a[jdx].maxc;\r\n    };\r\n\r\n    p(idx, 2 * idx);\r\n    p(idx, 2 * idx + 1);\r\n  }\r\n\r\n  void push(ll idx) {\r\n    pushAdd(idx);\r\n    pushMin(idx);\r\n    pushMax(idx);\r\n  }\r\n\r\n  void add(ll l, ll r, jnfo x) {\r\n    add(1, 0, N - 1, l, r, x);\r\n  }\r\n\r\n  void add(ll idx, ll tl, ll tr, ll l, ll r, jnfo x) {\r\n    if (l > r) return;\r\n    if (l == tl && r == tr) {\r\n      a[idx] += x;\r\n      lazy[idx] += x;\r\n    } else {\r\n      push(idx);\r\n      ll tm = tl + (tr - tl) \/ 2;\r\n      add(idx * 2, tl, tm, l, min(r, tm), x);\r\n      add(idx * 2 + 1, tm + 1, tr, max(l, tm + 1), r, x);\r\n      a[idx] = a[idx * 2] * a[idx * 2 + 1];\r\n    }\r\n  }\r\n\r\n  void chmin(ll l, ll r, ll x) {\r\n    chmin(1, 0, N - 1, l, r, x);\r\n  }\r\n\r\n  void chmin(ll idx, ll tl, ll tr, ll l, ll r, ll x) {\r\n    if (l > r) return;\r\n    if (x >= a[idx].max1) return;\r\n    if (l == tl && r == tr) {\r\n      if (x > a[idx].max2) {\r\n        if (a[idx].max1 == a[idx].min2) {\r\n          a[idx].min2 = x;\r\n        } else if (a[idx].max2 < a[idx].min1) {\r\n          a[idx].min1 = x;\r\n        }\r\n        a[idx].sum -= a[idx].max1 * a[idx].maxc;\r\n        a[idx].max1 = x;\r\n        a[idx].sum += a[idx].max1 * a[idx].maxc;\r\n        return;\r\n      }\r\n    }\r\n    push(idx);\r\n    ll tm = tl + (tr - tl) \/ 2;\r\n    chmin(idx * 2, tl, tm, l, min(r, tm), x);\r\n    chmin(idx * 2 + 1, tm + 1, tr, max(l, tm + 1), r, x);\r\n    a[idx] = a[idx * 2] * a[idx * 2 + 1];\r\n  }\r\n\r\n  void chmax(ll l, ll r, ll x) {\r\n    chmax(1, 0, N - 1, l, r, x);\r\n  }\r\n\r\n  void chmax(ll idx, ll tl, ll tr, ll l, ll r, ll x) {\r\n    if (l > r) return;\r\n    if (x <= a[idx].min1) return;\r\n    if (l == tl && r == tr) {\r\n      if (x < a[idx].min2) {\r\n        if (a[idx].min1 == a[idx].max2) {\r\n          a[idx].max2 = x;\r\n        } else if (a[idx].max2 < a[idx].min1) {\r\n          a[idx].max1 = x;\r\n        }\r\n        a[idx].sum -= a[idx].min1 * a[idx].minc;\r\n        a[idx].min1 = x;\r\n        a[idx].sum += a[idx].min1 * a[idx].minc;\r\n        return;\r\n      }\r\n    }\r\n    push(idx);\r\n    ll tm = tl + (tr - tl) \/ 2;\r\n    chmax(idx * 2, tl, tm, l, min(r, tm), x);\r\n    chmax(idx * 2 + 1, tm + 1, tr, max(l, tm + 1), r, x);\r\n    a[idx] = a[idx * 2] * a[idx * 2 + 1];\r\n  }\r\n\r\n  info query(ll l, ll r) {\r\n    return query(1, 0, N - 1, l, r);\r\n  }\r\n\r\n  info query(ll idx, ll tl, ll tr, ll l, ll r) {\r\n    if (l > r) return info();\r\n    if (tl == l && tr == r) return a[idx];\r\n    push(idx);\r\n    ll tm = tl + (tr - tl) \/ 2;\r\n    return query(2 * idx, tl, tm, l, min(tm, r)) * query(2 * idx + 1, tm + 1, tr, max(tm + 1, l), r);\r\n  }\r\n};\r\n",
    "category": "Data Structures",
    "tags": [
      "bsearch",
      "amortized",
      "logarithmic-query",
      "logarithmic-update"
    ]
  },
  {
    "title": "Stress Testing Script",
    "description": "Python script allowing automated stress testing. Expects main.cpp and slow.cpp. Make sure to pip install colorama before using or remove coloring from the script output.",
    "code": "import difflib\r\nimport os\r\nimport random\r\nimport subprocess\r\n\r\nfrom colorama import Fore, Style, init\r\n\r\nTEST_LIMIT = 1000\r\n\r\ndef gen():\r\n    # should return a string that represents the input for the test cases\r\n    pass\r\n\r\ndef main():\r\n    try:\r\n        subprocess.run(\"g++ main.cpp -o main\")\r\n        subprocess.run(\"g++ slow.cpp -o slow\")\r\n\r\n        init(autoreset=True)\r\n\r\n        def test(input_str, i):\r\n            main_res = subprocess.run(\r\n                os.path.join(\".\", \"main\"),\r\n                input=input_str,\r\n                capture_output=True,\r\n                text=True\r\n            )\r\n            main_out = main_res.stdout\r\n            main_ret = main_res.returncode\r\n\r\n            slow_res = subprocess.run(\r\n                os.path.join(\".\", \"slow\"),\r\n                input=input_str,\r\n                capture_output=True,\r\n                text=True\r\n            )\r\n            slow_out = slow_res.stdout\r\n            slow_ret = slow_res.returncode\r\n\r\n            if (main_ret != 0 or slow_ret != 0):\r\n                print(Fore.RED + \"Error in execution:\")\r\n                if main_ret != 0:\r\n                    print(f\"main returned {main_ret}\\n\")\r\n                if slow_ret != 0:\r\n                    print(f\"slow returned {slow_ret}\\n\")\r\n                print(f\"Test {i} input:\\n{input_str}\")\r\n                return None\r\n\r\n            main_lines = main_out.splitlines(keepends=True)\r\n            slow_lines = slow_out.splitlines(keepends=True)\r\n\r\n            return list(difflib.unified_diff(main_lines, slow_lines, fromfile='main', tofile='slow'))\r\n        \r\n        for i in range(1, TEST_LIMIT + 1):\r\n            input_str = gen()\r\n            diff = test(input_str, i)\r\n            if diff:\r\n                print(Fore.RED + f\"Test {i} outputs differ:\")\r\n                for line in diff:\r\n                    if line.startswith('+'):\r\n                        print(Fore.GREEN + line, end='')\r\n                    elif line.startswith('-'):\r\n                        print(Fore.RED + line, end='')\r\n                    else:\r\n                        print(Style.RESET_ALL + line, end='')\r\n                print(Style.RESET_ALL)\r\n                print(f\"Test {i} input:\\n{input_str}\")\r\n                break\r\n            else:\r\n                print(Fore.GREEN + f\"Test {i} outputs match!\")\r\n\r\n    except subprocess.CalledProcessError as e:\r\n        print(f\"Error executing command: {e}\")\r\n        print(f\"Command: {e.cmd}\")\r\n        print(f\"Return Code: {e.returncode}\")\r\n        print(f\"Output: {e.stdout}\")\r\n        print(f\"Error Output: {e.stderr}\")\r\n\r\nif __name__ == \"__main__\":\r\n    main()",
    "category": "Miscellaneous",
    "tags": [
      "python"
    ]
  }
]