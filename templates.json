[
  {
    "title": "Codeforces Default Template",
    "description": "",
    "code": "// Author: Matthew Li\n// It is ok to share my code anonymously for educational purposes\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, a, b) for (ll i = a; i < b; ++i)\n#define repr(i, a, b) for (ll i = b - 1; i >= a; --i)\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define sz(x) (int)(x).size()\n\ntypedef pair<int, int> pi;\ntypedef vector<int> vi;\ntypedef vector<pair<int, int>> vpi;\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef pair<long long, long long> pll;\ntypedef vector<long long> vll;\ntypedef vector<pair<long long, long long>> vpll;\ntypedef long double ld;\ntypedef pair<long double, long double> pld;\ntypedef vector<long double> vld;\ntypedef vector<pair<long double, long double>> vpld;\n\nint main() {\n  // fast io\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n\n  // iterate over tests\n  int tests;\n  cin >> tests;\n  for (int test = 0; test < tests; test++) {\n    \n  }\n}"
  },
  {
    "title": "Kadane's Algorithm",
    "description": "Returns the maximum nonempty subarray sum.",
    "code": "ll kadane(const vll& a) {\n  ll N = sz(a), res = LONG_LONG_MIN, sum = 0;\n  rep (i, 0, N) {\n    sum += a[i];\n    res = max(res, sum);\n    sum = max(sum, 0ll);\n  }\n  return res;\n}"
  },
  {
    "title": "Tarjan's Algorithm",
    "description": "Supply a handleScc function and make sure to call tarjans(tarjans, u) on all vertices u.",
    "code": "vll discovery(N, -1), lowlink(N, -1), ancestry;\nvector<bool> onStack(N, false);\nll tarjIdx = 0;\nauto tarjans = [&](auto tarjans, ll u) -> void {\n  discovery[u] = tarjIdx;\n  lowlink[u] = tarjIdx;\n  tarjIdx++;\n  ancestry.push_back(u);\n  onStack[u] = true;\n\n  for (const auto &v : adjList[u]) {\n    if (discovery[v] < 0) {\n      tarjans(tarjans, v);\n      lowlink[u] = min(lowlink[u], lowlink[v]);\n    } else if (onStack[v]) {\n      lowlink[u] = min(lowlink[u], lowlink[v]);\n    }\n  }\n\n  if (discovery[u] == lowlink[u]) {\n    set<ll> scc;\n    ll v = -1;\n    while (v != u) {\n      v = ancestry.back();\n      ancestry.pop_back();\n      onStack[v] = false;\n      scc.insert(v);\n    }\n    handleScc(scc);\n  }\n};"
  },
  {
    "title": "Closest Pair of Points",
    "description": "Returns indices of two closest points in the supplied array in O(nlogn), probably.",
    "code": "pll closestPair(const vpld& a) {\n  auto dist = [&](ll i, ll j) -> ld {\n    ld dx = a[i].first - a[j].first, dy = a[i].second - a[j].second;\n    return sqrt(dx * dx + dy * dy);\n  };\n\n  assert(sz(a) > 1);\n  vll idxs(sz(a));\n  iota(all(idxs), 0);\n  sort(all(idxs), [&](ll i, ll j) -> bool {return a[i] < a[j];});\n\n  pll res = {0, 1};\n  ld mind = dist(idxs[0], idxs[1]);\n  multiset<pair<ld, ll>> leftx, lefty;\n  rep (i, 0, sz(idxs)) {\n    ll idx = idxs[i];\n    ld x = a[idx].first, y = a[idx].second;\n\n    while (!leftx.empty()) {\n      auto it = leftx.begin();\n      if (it->first < x - mind) {\n        ll jdx = it->second;\n        leftx.erase(it);\n        lefty.erase({a[jdx].second, jdx});\n      } else {\n        break;\n      }\n    }\n    auto it = lefty.lower_bound({y - mind, 0});\n    auto jt = lefty.upper_bound({y + mind, LONG_LONG_MAX});\n    while (it != jt) {\n      ll jdx = it->second;\n      if (dist(idx, jdx) < mind) {\n        res = {idx, jdx};\n        mind = dist(idx, jdx);\n      }\n      it = next(it);\n    }\n\n    leftx.insert({a[idx].first, idx});\n    lefty.insert({a[idx].second, idx});\n  }\n\n  return res;\n};"
  },
  {
    "title": "Sieve and Friends",
    "description": "upfs holds the unique prime factors of each number up to MAXN and divisors(x) returns all products of subsets of upfs[x] in a 2d array.",
    "code": "vll primes;\nvll upfs[MAXN + 1]; // unique prime factors\nll totient[MAXN + 1];\nvoid sieve() {\n  rep (i, 2, MAXN + 1) {\n    if (upfs[i].empty()) {\n      primes.push_back(i);\n      totient[i] = i - 1;\n\n      ll j = i;\n      while (j <= MAXN) {\n        upfs[j].push_back(i);\n        j += i;\n      }\n    }\n\n    for (const auto& p : primes) {\n      if (p * i > MAXN) break;\n      if (i % p) {\n        totient[p * i] = totient[i] * (p - 1);\n      } else {\n        totient[p * i] = totient[i] * p;\n      }\n    }\n  }\n}\n\nvector<vll> divisors(ll x) {\n  vector<vll> res;\n  auto dfs = [&](auto dfs, ll prod, ll ct, ll idx) -> void {\n    if (idx == sz(upfs[x])) {\n      if (!ct) return;\n      while (ct > sz(res)) res.push_back(vll());\n      res[ct - 1].push_back(prod);\n      return;\n    }\n    dfs(dfs, prod, ct, idx + 1);\n    dfs(dfs, prod * upfs[x][idx], ct + 1, idx + 1);\n  };\n  dfs(dfs, 1, 0, 0);\n  return res;\n}"
  },
  {
    "title": "Miller-Rabin Primality Test",
    "description": "",
    "code": "// copied from KACTL\n#pragma once\ntypedef unsigned long long ull;\null modmul(ull a, ull b, ull M) {\n  ll ret = a * b - M * ull(1.L / M * a * b);\n  return ret + M * (ret < 0) - M * (ret >= (ll)M);\n}\null modpow(ull b, ull e, ull mod) {\n  ull ans = 1;\n  for (; e; b = modmul(b, b, mod), e /= 2)\n    if (e & 1) ans = modmul(ans, b, mod);\n  return ans;\n}\nbool isPrime(ull n) {\n  if (n < 2 || n % 6 % 4 != 1) return (n | 1) == 3;\n  ull A[] = {2, 325, 9375, 28178, 450775, 9780504, 1795265022},\n      s = __builtin_ctzll(n-1), d = n >> s;\n  for (ull a : A) {   // ^ count trailing zeroes\n    ull p = modpow(a%n, d, n), i = s;\n    while (p != 1 && p != n - 1 && a % n && i--)\n      p = modmul(p, p, n);\n    if (p != n-1 && i != s) return 0;\n  }\n  return 1;\n}"
  },
  {
    "title": "Prefix Function",
    "description": "",
    "code": "// copied from cp-algo\nvll prefixFn(const string_view &s) {\n  vll res(sz(s));\n  rep(i, 1, sz(s)) {\n    ll j = res[i - 1];\n    while (j > 0 && s[i] != s[j]) {\n      j = res[j - 1];\n    }\n    if (s[i] == s[j]) {\n      j++;\n    }\n    res[i] = j;\n  }\n  return res;\n}"
  },
  {
    "title": "Modular Integer",
    "description": "",
    "code": "// copied from KACTL\nll euclid(ll a, ll b, ll &x, ll &y) {\n  if (!b) return x = 1, y = 0, a;\n  ll d = euclid(b, a % b, y, x);\n  return y -= a/b * x, d;\n}\n\nconst ll mod = 1e9 + 7; // change to something else\nstruct mint {\n  ll x;\n  mint(ll xx) : x(xx) {}\n\n  mint operator+(mint b) { return mint((x + b.x) % mod); }\n  mint operator-(mint b) { return mint((x - b.x + mod) % mod); }\n  mint operator*(mint b) { return mint((x * b.x) % mod); }\n  mint operator/(mint b) { return *this * invert(b); }\n\n  void operator+=(mint b) { *this = mint((x + b.x) % mod); }\n  void operator-=(mint b) { *this = mint((x - b.x + mod) % mod); }\n  void operator*=(mint b) { *this =  mint((x * b.x) % mod); }\n  void operator/=(mint b) { *this = *this * invert(b); }\n\n  mint invert(mint a) {\n    ll x, y, g = euclid(a.x, mod, x, y);\n    assert(g == 1); return mint((x + mod) % mod);\n  }\n\n  mint operator^(ll e) {\n    if (!e) return mint(1);\n    mint r = *this ^ (e / 2); r = r * r;\n    return e&1 ? *this * r : r;\n  }\n};"
  },
  {
    "title": "Polynomial String Hashing",
    "description": "Robust polynomial string hashing using two different moduli. combine_hashes finds the hash of the concatenation of two hashed substrings.",
    "code": "// mint copied from KACTL\nll euclid(ll a, ll b, ll &x, ll &y) {\n  if (!b) return x = 1, y = 0, a;\n  ll d = euclid(b, a % b, y, x);\n  return y -= a / b * x, d;\n}\n\ntemplate<ll mod> struct mint {\n  ll x;\n\n  mint(ll xx) : x(xx) {\n  }\n\n  mint operator+(mint b) { return mint((x + b.x) % mod); }\n  mint operator-(mint b) { return mint((x - b.x + mod) % mod); }\n  mint operator*(mint b) { return mint((x * b.x) % mod); }\n  mint operator/(mint b) { return *this * invert(b); }\n\n  void operator+=(mint b) { x = (x + b.x) % mod; }\n  void operator-=(mint b) { x = (x - b.x + mod) % mod; }\n  void operator*=(mint b) { x = (x * b.x) % mod; }\n  void operator/=(mint b) { x = *this * invert(b); }\n\n  bool operator==(const mint b) const { return this->x == b.x; }\n\n  mint invert(mint a) {\n    ll x, y, g = euclid(a.x, mod, x, y);\n    assert(g == 1);\n    return mint((x + mod) % mod);\n  }\n\n  mint operator^(ll e) {\n    if (!e) return mint(1);\n    mint r = *this ^ (e / 2);\n    r = r * r;\n    return e & 1 ? *this * r : r;\n  }\n};\n\nconst ll MOD1 = 1e9 + 7, MOD2 = 1e9 + 9;\nconst mint<MOD1> POLY_HASH_COEF1 = 31;\nconst mint<MOD2> POLY_HASH_COEF2 = 37;\n\nll default_poly_hash_translate(char c) {\n  return c;\n}\n\nstruct poly_hash {\n  string str;\n  vector<mint<MOD1>> pre1;\n  vector<mint<MOD2>> pre2;\n  function<ll(char)> translate;\n\n  poly_hash(string &s, function<ll(char)> *t = NULL) {\n    str = s;\n    pre1 = vector<mint<MOD1>>(sz(str) + 1, 0);\n    pre2 = vector<mint<MOD2>>(sz(str) + 1, 0);\n    if (!t) {\n      translate = default_poly_hash_translate;\n    } else {\n      translate = *t;\n    }\n\n    rep(i, 0, sz(str)) {\n      pre1[i + 1] = pre1[i] + (mint(POLY_HASH_COEF1) ^ i) * translate(str[i]);\n      pre2[i + 1] = pre2[i] + (mint(POLY_HASH_COEF2) ^ i) * translate(str[i]);\n    }\n  }\n\n  pair<mint<MOD1>, mint<MOD2>> hash(int l, int r) {\n    return { (pre1[r + 1] - pre1[l]) / (mint(POLY_HASH_COEF1) ^ l), (pre2[r + 1] - pre2[l]) / (mint(POLY_HASH_COEF2) ^ l) };\n  }\n};\n\npair<mint<MOD1>, mint<MOD2>> combine_hashes(poly_hash &phash1, poly_hash &phash2, int l1, int r1, int l2, int r2) {\n  pair<mint<MOD1>, mint<MOD2>> hash1 = phash1.hash(l1, r1), hash2 = phash2.hash(l2, r2);\n  return { hash1.first + hash2.first * (mint(POLY_HASH_COEF1) ^ (r1 - l1 + 1)), hash1.second + hash2.second * (mint(POLY_HASH_COEF2) ^ (r1 - l1 + 1)) };\n}"
  },
  {
    "title": "Point and Line",
    "description": "TODO: add line-line intersection",
    "code": "struct point {\n  ld x, y;\n\n  point& operator+=(const point& p) {\n    x += p.x;\n    y += p.y;\n    return *this;\n  }\n  friend point operator+(point p, const point& q) {\n    p += q;\n    return p;\n  }\n  point& operator-=(const point& p) {\n    x -= p.x;\n    y -= p.y;\n    return *this;\n  }\n  friend point operator-(point p, const point& q) {\n    p -= q;\n    return p;\n  }\n\n  ld dot(const point& p) {\n    return x * p.x + y * p.y;\n  }\n  ld cross(const point& p) {\n    return x * p.y - y * p.x;\n  }\n  ld angle() {\n    if (x == 0) {\n      if (y > 0) return numbers::pi_v<ld> / 2;\n      return 3 * numbers::pi_v<ld> / 2;\n    }\n    if (x > 0) {\n      if (y >= 0) return atan(y / x);\n      return 2 * numbers::pi_v<ld> + atan(y / x);\n    }\n    return numbers::pi_v<ld> + atan(y / x);\n  }\n  ld length() {\n    return sqrt(x * x + y * y);\n  }\n};\npoint operator*(const ld& s, const point& p) {\n  return {s * p.x, s * p.y};\n}\npoint operator*(const point& p, const ld& s) {\n  return {s * p.x, s * p.y};\n}\npoint operator/(const point& p, const ld& s) {\n  return {p.x / s, p.y / s};\n}\npoint rotate(const point& p, ld theta) {\n  return {cos(theta) * p.x - sin(theta) * p.y, sin(theta) * p.x + cos(theta) * p.y};\n}\nld dist(const point& p, const point& q) {\n  return (p - q).length();\n}\n\nstruct line {\n  ld a, b, c;\n\n  line (point p, point q) {\n    a = p.y - q.y;\n    b = q.x - p.x;\n    c = -(a * p.x + b * p.y);\n  }\n};\n\nld area(const vector<point>& polygon) {\n  ld res = 0;\n  rep (i, 0, sz(polygon)) {\n    ll j = (i + 1) % sz(polygon);\n    res += polygon[i].x * polygon[j].y - polygon[i].y * polygon[j].x;\n  }\n  return res / 2;\n}"
  },
  {
    "title": "Circle and Ellipse Utilities",
    "description": "Both functions assume that the major axis is parallel to the x-axis and that the ellipse is centered at the origin, so use transformations as necessary.",
    "code": "ld segmentArea(ld r, ld t) {\n  return r * r * (t - sin(t)) / 2;\n}\n\nld ellipticSegmentArea(ld c, ld l, const point& p, const point& q) {\n  ld a = l / 2 - c, b = sqrt(a * a - c * c);\n  point pp = {p.x / a, p.y / b}, qp = {q.x / a, q.y / b};\n  if (pp.angle() > qp.angle()) swap(pp, qp);\n  return a * b * segmentArea(1, qp.angle() - pp.angle());\n}\n\npair<point, point> circleLineIntersection(ld r, const point& p, const point& q) {\n  line l(p, q);\n  ld d = sqrt(r * r - l.c * l.c / (l.a * l.a + l.b * l.b));\n  ld m = sqrt(d * d / (l.a * l.a + l.b * l.b));\n  ld x0 = -(l.a * l.c) / (l.a * l.a + l.b * l.b), y0 = -(l.b * l.c) / (l.a * l.a + l.b * l.b);\n  return {{x0 + l.b * m, y0 - l.a * m}, {x0 - l.b * m, y0 + l.a * m}};\n}\n\npair<point, point> ellipseLineIntersection(ld c, ld l, const point& p, const point& q) {\n  ld a = l / 2 - c, b = sqrt(a * a - c * c);\n  point pp = {p.x / a, p.y / b}, qp = {q.x / a, q.y / b};\n  auto [ap, bp] = circleLineIntersection(1, pp, qp);\n  return {{ap.x * a, ap.y * b}, {bp.x * a, bp.y * b}};\n}"
  },
  {
    "title": "Unique Point and Line",
    "description": "",
    "code": "struct point {\n  ll x, y;\n\n  point& operator+=(const point& p) {\n    x += p.x;\n    y += p.y;\n    return *this;\n  }\n  friend point operator+(point p, const point& q) {\n    p += q;\n    return p;\n  }\n  point& operator-=(const point& p) {\n    x -= p.x;\n    y -= p.y;\n    return *this;\n  }\n  friend point operator-(point p, const point& q) {\n    p -= q;\n    return p;\n  }\n\n  ll dot(const point& p) {\n    return x * p.x + y * p.y;\n  }\n  ll cross(const point& p) {\n    return x * p.y - y * p.x;\n  }\n};\n\nstruct line {\n  ll a, b, c;\n\n  const bool operator< (const line& l) const {\n    if (a < l.a) return true;\n    if (a > l.a) return false;\n    if (b < l.b) return true;\n    if (b > l.b) return false;\n    if (c < l.c) return true;\n    return false;\n  }\n\n  const bool operator== (const line& l) const {\n    return a == l.a && b == l.b && c == l.c;\n  }\n\n  line (point p, point q) {\n    a = p.y - q.y;\n    b = q.x - p.x;\n    c = -(a * p.x + b * p.y);\n    fix();\n  }\n\n  void fix() {\n    if (a < 0 || (a == 0 && b < 0)) {\n      a = -a;\n      b = -b;\n      c = -c;\n    }\n\n    ll g = gcd(gcd(abs(a), abs(b)), abs(c));\n    a /= g;\n    b /= g;\n    c /= g;\n  }\n};"
  },
  {
    "title": "Order Statistic Tree",
    "description": "Gnu policy-based data structures implementation of order statistic trees.  Just use set and multiset as you typically would, but you can also do stuff with order.",
    "code": "#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace __gnu_pbds;\n\ntypedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\ntypedef tree<ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;"
  },
  {
    "title": "Disjoint Set Union",
    "description": "DSU with path compression and union-by-size.  id holds the representatives of each set.  If id[x] is negative, it means that x is the representative and the set is of size -id[x].",
    "code": "ll find(ll p, vector<ll> &id) {\n  ll idp = p;\n  while (id[idp] >= 0) {\n    idp = id[idp];\n  }\n  while (id[p] >= 0) {\n    ll temp = id[p];\n    id[p] = idp;\n    p = temp;\n  }\n  return idp;\n}\n \nll size(ll p, vector<ll> &id) {\n  ll idp = find(p, id);\n  return -id[idp];\n}\n \nvoid unite(ll p, ll q, vector<ll> &id) {\n  ll idp = find(p, id);\n  ll idq = find(q, id);\n  if (idp == idq) {\n    return;\n  }\n  if (id[idp] < id[idq]) {\n    id[idq] = id[idq] + id[idp];\n    id[idp] = idq;\n    return;\n  }\n  id[idp] = id[idp] + id[idq];\n  id[idq] = idp;\n}"
  },
  {
    "title": "Sparse Table",
    "description": "Typical Sparse Table.  Ensure that the binary operation passed to the constructor is associative.  TODO: support constant-time RMQ.",
    "code": "template <class T>\nstruct sparse_table {\n  T (*op) (T a, T b);\n  unsigned int length, depth;\n  vector<vector<T>> table;\n  \n  sparse_table(vector<T> arr, T (*o) (T a, T b)) {\n    op = o;\n    length = arr.size();\n    depth = bit_width(length);\n    table = vector<vector<T>>(depth, vector<T>());\n    table[0] = arr;\n    for (unsigned int i = 1; i < depth; i++) {\n      for (unsigned int j = 0; j + (1 << i) <= length; j++) {\n        table[i].push_back(op(table[i - 1][j], table[i - 1][j + (1 << i - 1)]));\n      }\n    }\n  }\n  \n  T query(unsigned int l, unsigned int r) {\n    bool has_been_set = false;\n    T out;\n    for (unsigned int i = depth - 1; i >= 0; i--) {\n      while (l + (1 << i) - 1 <= r) {\n        if (!has_been_set) {\n          out = table[i][l];\n          has_been_set = true;\n        } else {\n          out = op(out, table[i][l]);\n        }\n        l += (1 << i);\n      }\n      if (!i) {\n        break;\n      }\n    }\n    return out;\n  }\n};"
  },
  {
    "title": "Fenwick Tree",
    "description": "Typical Fenwick Tree.  Ensure that the binary operation passed to the constructor is a group operation and supply its inverse and zero.",
    "code": "template <class T> struct fenwick_tree {\n  T (*op) (T a, T b);\n  T (*inv) (T a);\n  T zero;\n  vector<T> bit;\n\n  T prefix(int idx) {\n    if (idx < 0) {\n      return zero;\n    }\n    if (idx >= size()) idx = size() - 1;\n    T result = bit[idx];\n    for (int i = (idx & idx + 1) - 1; i >= 0; i = (i & i + 1) - 1) {\n      result = op(result, bit[i]);\n    }\n    return result;\n  }\n\n  T query(int l, int r) {\n    return op(prefix(r), inv(prefix(l - 1)));\n  }\n\n  void set(int idx, T val) {\n    T diff = op(val, inv(query(idx, idx)));\n    for (int i = idx; i < bit.size(); i = i | i + 1) {\n      bit[i] = op(bit[i], diff);\n    }\n  }\n\n  void add(int idx, T val) {\n    for (int i = idx; i < bit.size(); i = i | i + 1) {\n      bit[i] = op(bit[i], val);\n    }\n  }\n\n  void push_back(T val) {\n    int idx = bit.size();\n    int left = idx & (idx + 1);\n    if (idx == left) {\n      bit.push_back(val);\n    } else {\n      bit.push_back(op(val, query(left, idx - 1)));\n    }\n  }\n\n  unsigned int size() {\n    return bit.size();\n  }\n\n  int lower_bound(T a, ll (*comp) (T, T)) {\n    int res = 0;\n    for (int i = 1 << (bit_width(size()) - 1); i > 0; i >>= 1) {\n      if (res + i - 1 < size() && comp(bit[res + i - 1], a) < 0) {\n        res += i;\n        a = op(a, inv(bit[res - 1]));\n      }\n    }\n    return res;\n  }\n\n  int upper_bound(T a, ll (*comp) (T, T)) {\n    int res = 0;\n    for (int i = 1 << (bit_width(size()) - 1); i > 0; i >>= 1) {\n      if (res + i - 1 < size() && comp(bit[res + i - 1], a) <= 0) {\n        res += i;\n        a = op(a, inv(bit[res - 1]));\n      }\n    }\n    return res;\n  }\n\n  fenwick_tree(vector<T> arr, T(*o) (T a, T b), T(*iv) (T a), T z) {\n    op = o;\n    inv = iv;\n    zero = z;\n    int length = arr.size();\n    bit = vector<T>(length, z);\n    for (int i = 0; i < length; i++) {\n      add(i, arr[i]);\n    }\n  }\n};\n\nll add(ll a, ll b) { return a + b; }\nll neg(ll a) { return -a; }\nll diff(ll a, ll b) { return a - b; }"
  },
  {
    "title": "Point Update Segment Tree",
    "description": "Point update segment tree.  Make sure to define the info class and overload its addition operator.",
    "code": "struct segment_tree {\n  vector<info> t;\n  int n;\n\n  segment_tree(const vector<info> &a) {\n    t = vector<info>(4 * a.size());\n    n = a.size();\n    build(1, 0, n - 1, a);\n  }\n\n  void build(int idx, int tl, int tr, const vector<info> &a) {\n    if (tl == tr) {\n      t[idx] = a[tl];\n      return;\n    }\n    int tm = tl + (tr - tl) / 2;\n    build(2 * idx, tl, tm, a);\n    build(2 * idx + 1, tm + 1, tr, a);\n    t[idx] = t[2 * idx] + t[2 * idx + 1];\n  }\n\n  inline void update(int m, const info &a) {\n    update(1, 0, n - 1, m, a);\n  }\n\n  void update(int idx, int tl, int tr, int m, const info &a) {\n    if (m < tl || m > tr) return;\n    if (tl == tr) {\n      t[idx] = a;\n      return;\n    }\n    int tm = tl + (tr - tl) / 2;\n    update(2 * idx, tl, tm, m, a);\n    update(2 * idx + 1, tm + 1, tr, m, a);\n    t[idx] = t[2 * idx] + t[2 * idx + 1];\n  }\n\n  inline info query(int l, int r) {\n    return query(1, 0, n - 1, l, r);\n  }\n\n  info query(int idx, int tl, int tr, int l, int r) {\n    if (r < l) return info();\n    if (tl == l && tr == r) return t[idx];\n    int tm = tl + (tr - tl) / 2;\n    return query(2 * idx, tl, tm, l, min(tm, r)) + query(2 * idx + 1, tm + 1, tr, max(tm + 1, l), r);\n  }\n};"
  },
  {
    "title": "Range Update Segment Tree",
    "description": "Range update, maximum query segment tree.",
    "code": "// lazy range addition update, maximum query segment tree adapted from https://cp-algorithms.com/data_structures/segment_tree.html\nstruct segment_tree {\n  int n;\n  vector<ll> t;\n  vector<int> s;\n  vector<ll> lazy;\n\n  void build(const vector<ll> &arr, int idx, int tl, int tr) {\n    if (tl == tr) {\n      s[idx] = tl;\n      t[idx] = arr[tl];\n    } else {\n      int tm = tl + (tr - tl) / 2;\n      build(arr, idx * 2, tl, tm);\n      build(arr, idx * 2 + 1, tm + 1, tr);\n      if (t[idx * 2] >= t[idx * 2 + 1]) {\n        s[idx] = s[idx * 2];\n        t[idx] = t[idx * 2];\n      } else {\n        s[idx] = s[idx * 2 + 1];\n        t[idx] = t[idx * 2 + 1];\n      }\n    }\n  }\n\n  void push(int idx) {\n    t[idx * 2] += lazy[idx];\n    lazy[idx * 2] += lazy[idx];\n    t[idx * 2 + 1] += lazy[idx];\n    lazy[idx * 2 + 1] += lazy[idx];\n    lazy[idx] = 0;\n  }\n\n  void update(int idx, int tl, int tr, int l, int r, ll diff) {\n    if (l > r) return;\n    if (l == tl && r == tr) {\n      t[idx] += diff;\n      lazy[idx] += diff;\n    } else {\n      push(idx);\n      int tm = tl + (tr - tl) / 2;\n      update(idx * 2, tl, tm, l, min(r, tm), diff);\n      update(idx * 2 + 1, tm + 1, tr, max(l, tm + 1), r, diff);\n      if (t[idx * 2] >= t[idx * 2 + 1]) {\n        s[idx] = s[idx * 2];\n        t[idx] = t[idx * 2];\n      } else {\n        s[idx] = s[idx * 2 + 1];\n        t[idx] = t[idx * 2 + 1];\n      }\n    }\n  }\n\n  inline void update(int l, int r, ll diff) {\n    update(1, 0, n - 1, l, r, diff);\n  }\n\n  pair<ll, int> query(int idx, int tl, int tr, int l, int r) {\n    if (l > r) return make_pair(LONG_LONG_MIN, -1);\n    if (l == tl && r == tr) return make_pair(t[idx], s[idx]);\n    push(idx);\n    int tm = tl + (tr - tl) / 2;\n    return max(query(idx * 2, tl, tm, l, min(r, tm)),\n               query(idx * 2 + 1, tm + 1, tr, max(l, tm + 1), r));\n  }\n\n  inline pair<ll, int> query(int l, int r) {\n    return query(1, 0, n - 1, l, r);\n  }\n\n  segment_tree(const vector<ll> &arr) {\n    n = arr.size();\n    s = vector<int>(n * 4, 0);\n    t = vector<ll>(n * 4, 0);\n    lazy = vector<ll>(n * 4, 0);\n    build(arr, 1, 0, n - 1);\n  }\n};"
  },
  {
    "title": "Li Chao Tree",
    "description": "Li Chao Tree implemented as a dynamic segment tree on lines.",
    "code": "struct line {\n  ll a, b;\n\n  ll val(ll x) {\n    return a * x + b;\n  }\n};\n\nstruct node {\n  node * left = NULL, * right = NULL;\n  line v;\n  bool has_line = false;\n  ll l, r;\n\n  node(ll l, ll r) {\n    this->l = l;\n    this->r = r;\n  }\n\n  void ensure_left() {\n    if (!left && l < r) {\n      ll m = l + (r - l) / 2;\n      left = new node(l, m);\n      if (has_line) {\n        left->v = v;\n      }\n    }\n  }\n\n  void ensure_right() {\n    if (!right && l < r) {\n      ll m = l + (r - l) / 2;\n      right = new node(m + 1, r);\n      if (has_line) {\n        right->has_line = true;\n        right->v = v;\n      }\n    }\n  }\n};\n\nstruct li_chao_tree {\n  ll ml, mr;\n  node * root = NULL;\n\n  li_chao_tree(ll l, ll r) {\n    ml = l;\n    mr = r;\n    root = new node(l, r);\n  };\n\n  inline void update(line v, ll l, ll r) {\n    update(root, v, ml, mr, l, r);\n  }\n\n  void update(node * cur, line v, ll tl, ll tr, ll l, ll r) {\n    if (l > r) return;\n    if (tl == l && tr == r) {\n      update_node(cur, v);\n    } else if (tl < tr) {\n      ll tm = tl + (tr - tl) / 2;\n      if (l <= tm) {\n        cur->ensure_left();\n        update(cur->left, v, tl, tm, l, min(tm, r));\n      }\n      if (r > tm) {\n        cur->ensure_right();\n        update(cur->right, v, tm + 1, tr, max(tm + 1, l), r);\n      }\n    }\n  }\n\n  void update_node(node * cur, line v) {\n    ll tl = cur->l, tr = cur->r;\n    ll tm = tl + (tr - tl) / 2;\n\n    if (!cur->has_line) {\n      // currently no line, replace\n      cur->has_line = true;\n      cur->v = v;\n      return;\n    }\n\n    // there is already a line\n    bool gl = v.val(tl) > cur->v.val(tl), gm = v.val(tm) > cur->v.val(tm), gr = v.val(tr) > cur->v.val(tr);\n    if (gl && gr) {\n      cur->has_line = true;\n      cur->v = v;\n      return;\n    }\n    if (!gl && !gr) return;\n\n    if (gm) swap(cur->v, v);\n    if (gl != gm) {\n      cur->ensure_left();\n      update_node(cur->left, v);\n    } else if (gr != gm) {\n      cur->ensure_right();\n      update_node(cur->right, v);\n    }\n  }\n\n  inline ll query(ll x) {\n    return query(root, x);\n  }\n\n  ll query(node * cur, ll x) {\n    ll tl = cur->l, tr = cur->r;\n    ll tm = tl + (tr - tl) / 2;\n    ll ans = LONG_LONG_MIN;\n    if (cur->has_line) {\n      ans = cur->v.val(x);\n    }\n    if (x <= tm && cur->left) {\n      ans = max(ans, query(cur->left, x));\n    } else if (x > tm && cur->right) {\n      ans = max(ans, query(cur->right, x));\n    }\n    return ans;\n  }\n};"
  }
]